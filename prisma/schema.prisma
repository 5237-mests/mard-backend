// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  email             String             @unique @db.VarChar(255)
  phone             String             @db.VarChar(20)
  password          String             @db.VarChar(1024)
  role              Role               @default(USER)
  isVerified        Boolean            @default(false)
  verificationToken String?            @db.VarChar(255)
  
  // Relations
  managedShops      Shop[]             @relation("ShopManager")
  managedStores     Store[]            @relation("StoreManager")
  sales             Sale[]
  transferRequests  TransferRequest[]  @relation("TransferRequester")
  approvedTransfers TransferRequest[]  @relation("TransferApprover")
  notifications     Notification[]

  @@map("users")
}

enum Role {
  ADMIN
  SHOPKEEPER
  STOREKEEPER
  USER

  @@map("role")
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  code        String      @unique @db.VarChar(100)
  unit        String      @db.VarChar(50)
  description String?     @db.Text
  
  // Relations
  shopItems   ShopItem[]
  storeItems  StoreItem[]

  @@map("items")
}

model Shop {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  location     String     @db.VarChar(255)
  shopkeeperId Int?
  
  // Relations
  shopkeeper   User?      @relation("ShopManager", fields: [shopkeeperId], references: [id])
  items        ShopItem[]
  sales        Sale[]

  @@map("shops")
}

model Store {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  location      String      @db.VarChar(255)
  storekeeperId Int?
  
  // Relations
  storekeeper   User?       @relation("StoreManager", fields: [storekeeperId], references: [id])
  items         StoreItem[]

  @@map("stores")
}

model ShopItem {
  id       Int  @id @default(autoincrement())
  shopId   Int
  itemId   Int
  quantity Int
  
  // Relations
  shop     Shop @relation(fields: [shopId], references: [id])
  item     Item @relation(fields: [itemId], references: [id])

  @@map("shop_items")
}

model StoreItem {
  id       Int   @id @default(autoincrement())
  storeId  Int
  itemId   Int
  quantity Int
  
  // Relations
  store    Store @relation(fields: [storeId], references: [id])
  item     Item  @relation(fields: [itemId], references: [id])

  @@map("store_items")
}

model Sale {
  id       Int      @id @default(autoincrement())
  shopId   Int
  items    Json
  soldById Int
  soldAt   DateTime @default(now())
  
  // Relations
  shop     Shop     @relation(fields: [shopId], references: [id])
  soldBy   User     @relation(fields: [soldById], references: [id])

  @@map("sales")
}

model TransferRequest {
  id            Int                   @id @default(autoincrement())
  from          Int
  to            Int
  items         Json
  status        TransferRequestStatus @default(PENDING)
  requestedById Int
  approvedById  Int?
  
  // Relations
  requestedBy   User                  @relation("TransferRequester", fields: [requestedById], references: [id])
  approvedBy    User?                 @relation("TransferApprover", fields: [approvedById], references: [id])

  @@map("transfer_requests")
}

enum TransferRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("transfer_request_status")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}
